SELECT     V.ACC_NO, CASE WHEN (P1.IS_GROUP = 1 AND P1.DETAIL <> 1) THEN ACC_TYPE_NAME ELSE A1.ACC_NAME END AS NAME, A1.ACC_NAME, V.AMOUNT, 
                      P1.IS_GROUP, P1.ORDER_BY, P1.PL_ACC_TYPE, P1.GROUP_NAME, P1.GROUP_CODE
FROM         (SELECT     CASE WHEN P.DETAIL = 1 AND IS_GROUP = 1 THEN A.ACC_NO ELSE P.ACC_NO END AS ACC_NO, 
                                              SUM(CASE WHEN T .DR_CR = 'D' THEN PAY_AMOUNT ELSE PAY_AMOUNT * - 1 END) AS AMOUNT, MIN(P.Acc_No) AS PACC_NO
                        FROM         dbo.TRN_ACCOUNTS AS T LEFT OUTER JOIN
                                              dbo.REPORT_DT ON T.PAY_DATE <= dbo.REPORT_DT.BalDate INNER JOIN
                                              dbo.ACCOUNTS AS A ON T.ACC_NO = A.ACC_NO INNER JOIN
                                              dbo.BAL_SHEET AS P ON T.ACC_NO = CASE WHEN IS_GROUP = 0 THEN P.ACC_NO END OR 
                                              A.ACC_TYPE_CODE = CASE WHEN IS_GROUP = 1 THEN P.ACC_NO ELSE - 1 END AND A.ACC_NO NOT IN
                                                  (SELECT     Acc_No
                                                     FROM         dbo.PL_EXPENSE)
                        GROUP BY CASE WHEN P.DETAIL = 1 AND IS_GROUP = 1 THEN A.ACC_NO ELSE P.ACC_NO END) AS V LEFT OUTER JOIN
                      dbo.BAL_SHEET AS P1 ON V.PACC_NO = P1.Acc_No LEFT OUTER JOIN
                      dbo.ACCOUNTS AS A1 ON A1.ACC_NO = V.ACC_NO LEFT OUTER JOIN
                      dbo.ACC_TYPE AS AT ON AT.ACC_TYPE_CODE = V.ACC_NO
                      UNION ALL
                      
                      SELECT AST_CAT_CODE, MIN(AST_CAT_NAME) AS ANAME,MIN(AST_CAT_NAME) AS ACC_NAME,SUM(CASE WHEN T .DR_CR = 'D' THEN PAY_AMOUNT ELSE PAY_AMOUNT * - 1 END) AS AMOUNT,0,0,0,'Asset',1
                      from AC_OPTIONS LEFT JOIN TRN_TYPE ON 1=1   LEFT JOIN asset_Cat ON TRN_CODE=AST_AC_TYPE  left join trn_Accounts as T ON t.ACC_NO = TRN_TYPE.ACC_NO AND T.PAYBY =AST_CAT_CODE WHERE AST_CAT_CODE IS NOT NULL GROUP BY AST_CAT_CODE
0	S	False	3	SUM
8	E	True	6	SALES
601	E	False	7	EXPENSE
5003	I	False	1	EXPENSE
5005	E	False	5	EXPENSE
5016	E	False	4	EXPENSE
5021	I	False	2	SALES
NULL	NULL	NULL	NULL	NULL


CREATE VIEW V_BALANCE_SHEET
AS
SELECT V.ACC_NO ,CASE WHEN (P1.IS_GROUP =1 AND P1.DETAIL<>1 )  THEN ACC_TYPE_NAME ELSE A1.ACC_NAME END AS NAME, A1.ACC_NAME, V.AMOUNT,P1.IS_GROUP,P1.ORDER_BY,PL_ACC_TYPE,GROUP_NAME 
FROM 

(SELECT   CASE WHEN P.DETAIL=1 AND IS_GROUP=1 THEN A.ACC_NO ELSE P.ACC_NO END AS ACC_NO , SUM(CASE WHEN T.DR_CR='D' THEN  PAY_AMOUNT ELSE PAY_AMOUNT * - 1 END ) AS AMOUNT,MIN(P.ACC_NO) AS PACC_NO

FROM  TRN_ACCOUNTS as T INNER JOIN ACCOUNTS AS A ON T.ACC_NO=A.ACC_NO
INNER JOIN   BAL_SHEET AS P ON  (T.ACC_NO=CASE WHEN IS_GROUP = 0 THEN P.ACC_NO END OR 
A.ACC_TYPE_CODE = CASE WHEN IS_GROUP = 1  THEN P.ACC_NO ELSE -1 END AND A.ACC_NO NOT IN (SELECT ACC_NO FROM PL_EXPENSE) )
 GROUP BY CASE WHEN P.DETAIL=1 AND IS_GROUP=1 THEN A.ACC_NO ELSE P.ACC_NO END) V 
 LEFT JOIN BAL_SHEET AS P1 ON 
 V.PACC_NO= P1.ACC_NO --CASE WHEN (P1.DETAIL='Y' AND IS_GROUP=1) THEN V.ACC_NO ELSE P1.ACC_NO END
LEFT JOIN ACCOUNTS AS A1 ON A1.ACC_NO = V.ACC_NO -- CASE WHEN IS_GROUP <> 1 OR P1.DETAIL=1 THEN V.ACC_NO ELSE V.ACC_NO END
 LEFT JOIN ACC_TYPE AS AT ON AT.ACC_TYPE_CODE =V.ACC_NO -- CASE  WHEN IS_GROUP <> 1 AND  P1.DETAIL<>1 THEN V.ACC_NO ELSE -1 END
USE [Finance]
GO

/****** Object:  Table [dbo].[BAL_SHEET]    Script Date: 10/27/2017 00:43:41 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[BAL_SHEET](
	[Acc_No] [int] NOT NULL,
	[PL_ACC_TYPE] [nvarchar](1) NULL,
	[IS_GROUP] [bit] NULL,
	[ORDER_BY] [int] NULL,
	[GROUP_NAME] [nvarchar](50) NULL,
	[DETAIL] [int] NULL,
 CONSTRAINT [PK_BAL_SHEET] PRIMARY KEY CLUSTERED 
(
	[Acc_No] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


2	I	True	1	ASSET	0
3	E	True	4	LIABILITY	0
7	I	True	2	ASSET	1
5020	I	False	3	ASSET	0
NULL	NULL	NULL	NULL	NULL	NULL


ALTER TABLE [dbo].[BAL_SHEET] ADD  CONSTRAINT [DF_BAL_SHEET_DETAIL]  DEFAULT ('N') FOR [DETAIL]
GO





ALTER  TRIGGER [dbo].[ACCOUNTS_INSERT]
       ON [dbo].[ACCOUNTS]
AFTER INSERT
AS
BEGIN
       SET NOCOUNT ON;
 
       DECLARE @CustomerId INT
 INSERT INTO [Servicex].[dbo].[TRN_ACCOUNTS]
           ([TRN_NO]
           ,[DR_CR]
           ,[ACC_NO]
           ,[PAY_AMOUNT]
           ,[PAY_DATE]
           ,[NARRATION],
           ENTRY_NO)
           
           select 
           (select MAX(trn_no) AS Row# from trn_accounts) + 1 as trn_no
           ,'D',ACC_NO,0,getdate(),'Starting Entry',-999 from  inserted
           
       
       
       
END
CREATE VIEW V_PROFTLOSS
AS
SELECT V.ACC_NO,CASE WHEN P1.IS_GROUP =1 THEN ACC_TYPE_NAME ELSE A1.ACC_NAME END AS NAME, A1.ACC_NAME, V.AMOUNT,P1.IS_GROUP,P1.ORDER_BY,PL_ACC_TYPE,GROUP_NAME FROM 

(SELECT   P.ACC_NO , SUM(CASE WHEN T.DR_CR='D' THEN  PAY_AMOUNT ELSE PAY_AMOUNT * - 1 END ) AS AMOUNT

FROM  TRN_ACCOUNTS as T INNER JOIN ACCOUNTS AS A ON T.ACC_NO=A.ACC_NO
INNER JOIN   PL_EXPENSE AS P ON  (T.ACC_NO=CASE WHEN IS_GROUP = 0 THEN P.ACC_NO END OR 
A.ACC_TYPE_CODE = CASE WHEN IS_GROUP = 1  THEN P.ACC_NO ELSE -1 END AND A.ACC_NO NOT IN (SELECT ACC_NO FROM PL_EXPENSE) )
 GROUP BY P.ACC_NO) V INNER JOIN PL_EXPENSE AS P1 ON V.ACC_NO=P1.ACC_NO
 LEFT JOIN ACCOUNTS AS A1 ON A1.ACC_NO = CASE WHEN IS_GROUP <> 1 THEN V.ACC_NO ELSE -1 END
 LEFT JOIN ACC_TYPE AS AT ON AT.ACC_TYPE_CODE = CASE  WHEN IS_GROUP =1 THEN V.ACC_NO ELSE -1 END
 --ORDER BY P1.ORDER_BY
GO


CREATE VIEW V_TRIAL_BALANCE AS 
select 
case when (O.cus_ac_type = A.ACC_TYPE_CODE or O.sup_ac_type = A.ACC_TYPE_CODE or O.EMP_ac_type = A.ACC_TYPE_CODE )  THEN a.ACC_TYPE_CODE else a.acc_no end as ACCNO,
case when (O.cus_ac_type = A.ACC_TYPE_CODE or O.sup_ac_type = A.ACC_TYPE_CODE or O.EMP_ac_type = A.ACC_TYPE_CODE)  THEN ACC_TYPE_NAME else a.ACC_NAME end   AS ACCNAME,
--A.ACC_NO,ACC_NAME,
round(SUM(CASE WHEN DR_CR='D' THEN PAY_AMOUNT ELSE PAY_AMOUNT*-1 END),2) AMOUNT
FROM ACCOUNTS AS A INNER JOIN TRN_ACCOUNTS AS T ON  A.ACC_NO=T.ACC_NO
inner join acc_type as p on a.acc_type_code = p.acc_type_code
left outer join ac_options AS O on 1=1
GROUP BY
case when (O.cus_ac_type = A.ACC_TYPE_CODE or O.sup_ac_type = A.ACC_TYPE_CODE or O.EMP_ac_type = A.ACC_TYPE_CODE )  THEN a.ACC_TYPE_CODE else a.acc_no end ,
case when (O.cus_ac_type = A.ACC_TYPE_CODE or O.sup_ac_type = A.ACC_TYPE_CODE or O.EMP_ac_type = A.ACC_TYPE_CODE)  THEN ACC_TYPE_NAME else a.ACC_NAME end 



CONTRACT_NO	int	Checked
worked_Days	int	Checked
add acc_from payment_det
change trn_no type

GO

USE [Finance]
GO

/****** Object:  Table [dbo].[SALARY_DET]    Script Date: 10/18/2017 23:18:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [dbo].[SALARY_DET](
	[EMP_ID] [numeric](18, 0) NULL,
	[SALARY_MONTH] [varchar](50) NULL,
	[EFFECT_DATE] [date] NULL,
	[FULLNAME] [nvarchar](100) NULL,
	[BASIC] [real] NULL,
	[HOUSING] [real] NULL,
	[TRANSPORTATION] [real] NULL,
	[OTHER] [real] NULL,
	[DEDUCTION] [real] NULL,
	[LOAN_AMT] [real] NULL,
	[REMARKS] [text] NULL,
	[NET_AMOUNT] [real] NULL,
	[ID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[SAL_ACNO] [numeric](18, 0) NULL,
	[EMP_ACNO] [numeric](18, 0) NULL,
	[ENTRY_DATE] [date] NULL,
	[OVERTIME] [real] NULL,
	[worked_Days] [int] NULL,
	[CONTRACT_ID] [int] NULL,
	[PAID_AMOUNT] [real] NULL,
	[PAID_DATE] [date] NULL,
	[TRN_NO1] [numeric](18, 0) NULL,
	[TRN_NO2] [numeric](18, 0) NULL,
	[PAID_TRNO1] [numeric](18, 0) NULL,
	[PAID_TRNO2] [numeric](18, 0) NULL,
 CONSTRAINT [PK_SALARY_DET] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

ALTER TABLE [dbo].[SALARY_DET] ADD  CONSTRAINT [DF_SALARY_DET_ENTRY_DATE]  DEFAULT (getdate()) FOR [ENTRY_DATE]
GO



